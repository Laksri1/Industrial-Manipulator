% E/18/023
% Amarasinghe E.G.C.L.


EN = 023; % My reg no 

A_y = 0.30; % since EN is odd
A_z = 0.010 + EN / 420 * 0.40;

% DH parameters
L1 = Link('d', 0.24765, 'a', 0, 'alpha', pi/2);
L2 = Link('d', 0, 'a', 0.2286, 'alpha', 0);
L3 = Link('d', 0, 'a', 0.2286, 'alpha', 0);
L4 = Link('d', 0, 'a', 0, 'alpha', -pi/2);
L5 = Link('d', 0.073025, 'a', 0, 'alpha', 0);

Robot = SerialLink([L1 L2 L3 L4 L5], 'name', '023');

A_pos = [-0.17, A_y, A_z];
A_rpy = [-180, 0, 60];
B_pos = [0.181, 0.313, 0.345];
B_rpy = [-125, 26, 106];
C_pos = [0.420, 0.000, 0.540];
C_rpy = [0, 70, 0];
D_pos = [0.237, -0.338, 0.100];
D_rpy = [180, 0, -125];

start_pos = [-0.146, 0, 0.409];
start_rpy = [0, -90, -180];

Home_T = transl(start_pos) * rpy2tr(deg2rad(start_rpy));
A_T = transl(A_pos) * rpy2tr(deg2rad(A_rpy));
B_T = transl(B_pos) * rpy2tr(deg2rad(B_rpy));
C_T = transl(C_pos) * rpy2tr(deg2rad(C_rpy));
D_T = transl(D_pos) * rpy2tr(deg2rad(D_rpy));

q_home = Robot.ikcon(Home_T);
q_A = Robot.ikcon(A_T);
q_B = Robot.ikcon(B_T);
q_C = Robot.ikcon(C_T);
q_D = Robot.ikcon(D_T);


t = 0:0.04:2;

traj_home_A = jtraj(q_home, q_A, t);
traj_A_B = jtraj(q_A, q_B, t);
traj_B_C = jtraj(q_B, q_C, t);
traj_C_D = jtraj(q_C, q_D, t);
traj_D_home = jtraj(q_D, q_home, t);


segments = {traj_home_A, traj_A_B, traj_B_C, traj_C_D, traj_D_home};
segment_names = {'Home_to_A', 'A_to_B', 'B_to_C', 'C_to_D', 'D_to_Home'};
save_directory = './frameDIR/';

figure;
hold on;

for idx = 1:length(segments)
    plot_trajectory(Robot, segments{idx}, segment_names{idx}, save_directory);
end

hold off;

% Function to plot and save end-effector trajectory
function plot_trajectory(RobotModel, trajectory, segmentName, saveDirectory)
    endEffectorPositions = zeros(size(trajectory, 1), 3); % End-effector positions array

    for stepIndex = 1:size(trajectory, 1)
        endEffectorTransform = double(RobotModel.fkine(trajectory(stepIndex, :)));
        endEffectorPositions(stepIndex, :) = endEffectorTransform(1:3, 4)';
        
        plot3(endEffectorPositions(1:stepIndex, 1), endEffectorPositions(1:stepIndex, 2), endEffectorPositions(1:stepIndex, 3), 'b');
        plot2(endEffectorPositions(stepIndex, :), 'r.');
        
        RobotModel.plot(trajectory(stepIndex, :));
        
        frameFileName = fullfile(saveDirectory, [segmentName, '_frame_', num2str(stepIndex), '.png']);
        saveas(gcf, frameFileName);
        
        grid on;
        xlim([-0.5, 0.5]);
        ylim([-0.5, 0.5]);
        zlim([-0.5, 0.6]);
        xlabel('X (m)');
        ylabel('Y (m)');
        zlabel('Z (m)');
        title(['End-Effector Trajectory: ', segmentName]);
        
        pause(0.05);
    end
end


